//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MK.StordProcedureMVC.DB_Connection
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class emEntities : DbContext
    {
        public emEntities()
            : base("name=emEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<logien> logiens { get; set; }
    
        public virtual ObjectResult<GetAllData_Result> GetAllData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllData_Result>("GetAllData");
        }
    
        public virtual int Insertvalue(Nullable<int> empId, string name, string email, string phone, Nullable<int> adressId, Nullable<int> deptId, string village, Nullable<int> pinCode, string buildingNo, string district, string depCode, string depName)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var adressIdParameter = adressId.HasValue ?
                new ObjectParameter("adressId", adressId) :
                new ObjectParameter("adressId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var villageParameter = village != null ?
                new ObjectParameter("Village", village) :
                new ObjectParameter("Village", typeof(string));
    
            var pinCodeParameter = pinCode.HasValue ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(int));
    
            var buildingNoParameter = buildingNo != null ?
                new ObjectParameter("BuildingNo", buildingNo) :
                new ObjectParameter("BuildingNo", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var depCodeParameter = depCode != null ?
                new ObjectParameter("DepCode", depCode) :
                new ObjectParameter("DepCode", typeof(string));
    
            var depNameParameter = depName != null ?
                new ObjectParameter("DepName", depName) :
                new ObjectParameter("DepName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertvalue", empIdParameter, nameParameter, emailParameter, phoneParameter, adressIdParameter, deptIdParameter, villageParameter, pinCodeParameter, buildingNoParameter, districtParameter, depCodeParameter, depNameParameter);
        }
    
        public virtual int DeletTable(Nullable<int> empId, Nullable<int> adressId, Nullable<int> deptId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var adressIdParameter = adressId.HasValue ?
                new ObjectParameter("adressId", adressId) :
                new ObjectParameter("adressId", typeof(int));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletTable", empIdParameter, adressIdParameter, deptIdParameter);
        }
    
        public virtual int UpdateTable(Nullable<int> empId, string name, string email, string phone, Nullable<int> adressId, string village, Nullable<int> pinCode, string buildingNo, string district, Nullable<int> deptId, string depCode, string depName)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var adressIdParameter = adressId.HasValue ?
                new ObjectParameter("adressId", adressId) :
                new ObjectParameter("adressId", typeof(int));
    
            var villageParameter = village != null ?
                new ObjectParameter("Village", village) :
                new ObjectParameter("Village", typeof(string));
    
            var pinCodeParameter = pinCode.HasValue ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(int));
    
            var buildingNoParameter = buildingNo != null ?
                new ObjectParameter("BuildingNo", buildingNo) :
                new ObjectParameter("BuildingNo", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(int));
    
            var depCodeParameter = depCode != null ?
                new ObjectParameter("DepCode", depCode) :
                new ObjectParameter("DepCode", typeof(string));
    
            var depNameParameter = depName != null ?
                new ObjectParameter("DepName", depName) :
                new ObjectParameter("DepName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTable", empIdParameter, nameParameter, emailParameter, phoneParameter, adressIdParameter, villageParameter, pinCodeParameter, buildingNoParameter, districtParameter, deptIdParameter, depCodeParameter, depNameParameter);
        }
    
        public virtual ObjectResult<GetAllDataWithId_Result> GetAllDataWithId(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDataWithId_Result>("GetAllDataWithId", empIdParameter);
        }
    }
}
